apiVersion: v1
kind: ConfigMap
metadata:
  name: es-foods-index
  namespace: backend
data:
  foods.json: |
    {
      "settings": {
        "analysis": {
          "char_filter": {
            "remove_ws_underscore": {
              "type": "pattern_replace",
              "pattern": "[\\s_]+",
              "replacement": ""
            }
          },
          "analyzer": {
            "korean_nori": { "type":"custom", "tokenizer":"nori_tokenizer" },
            "edge_ngram_analyzer": {
              "type":"custom", "tokenizer":"edge_ngram_tokenizer", "filter":["lowercase"]
            },
            "ngram_23_analyzer": {
              "type":"custom", "tokenizer":"ngram_23_tokenizer", "filter":["lowercase"]
            },
            "ko_keyword_norm": {
              "type":"custom", "tokenizer":"keyword",
              "char_filter":["remove_ws_underscore"], "filter":["lowercase"]
            }
          },
          "tokenizer": {
            "edge_ngram_tokenizer": {
              "type":"edge_ngram","min_gram":1,"max_gram":20,
              "token_chars":["letter","digit"]
            },
            "ngram_23_tokenizer": {
              "type":"ngram","min_gram":2,"max_gram":3,
              "token_chars":["letter","digit"]
            }
          }
        }
      },
      "mappings": {
        "properties": {
          "id": { "type":"long" },
          "name": {
            "type": "text",
            "fields": {
              "analyzed" : { "type":"text", "analyzer":"korean_nori" },
              "edge"     : { "type":"text", "analyzer":"edge_ngram_analyzer", "search_analyzer":"standard" },
              "ngram"    : { "type":"text", "analyzer":"ngram_23_analyzer", "search_analyzer":"standard" },
              "norm"     : { "type":"text", "analyzer":"ko_keyword_norm" },
              "raw"      : { "type":"keyword" }
            },
            "analyzer": "korean_nori"
          },
          "calories": { "type":"float" }
        }
      }
    }
---
apiVersion: batch/v1
kind: Job
metadata:
  name: es-create-foods-index
  namespace: backend
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: curl
          image: curlimages/curl:8.8.0
          args:
            - /bin/sh
            - -c
            - |
              set -e
              until curl -sS http://elasticsearch.backend.svc.cluster.local:9200 >/dev/null; do
                echo "waiting for ES..."; sleep 3;
              done
              echo "creating index (idempotent)..."
              curl -sS -o /dev/null -w "%{http_code}\n" -X PUT \
                "http://elasticsearch.backend.svc.cluster.local:9200/foods" \
                -H 'Content-Type: application/json' \
                --data-binary @/cfg/foods.json || true
              echo "done."
          volumeMounts:
            - name: cfg
              mountPath: /cfg
      volumes:
        - name: cfg
          configMap:
            name: es-foods-index
