package com.cloudbread.domain.crawling.application;

import com.cloudbread.global.util.ExcelWriter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.stereotype.Service;

import java.util.*;
import java.time.Duration;

@Service
@Slf4j
@RequiredArgsConstructor
public class CrawlingServiceImpl implements CrawlingService {

    @Override
    public void fetchContent() {
        WebDriver driver = new ChromeDriver();
        List<String[]> rows = new ArrayList<>(); // ‚úÖ ExcelÏóê ÎÑ£ÏùÑ Îç∞Ïù¥ÌÑ∞ ÎàÑÏ†Å
        List<String[]> firstWeekRows = new ArrayList<>(); // ‚úÖ 1Ï£ºÏ∞® Îç∞Ïù¥ÌÑ∞Î•º Ï†ÄÏû•Ìï¥ÎíÄÎã§Í∞Ä 2~4Ï£ºÏ∞®Ïóê Î≥µÏ†ú

        try {
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));
            Set<String> seenNormalizedTexts = new HashSet<>(); // Ï§ëÎ≥µ Ï†úÍ±∞Ïö© Set

            for (int week = 1; week <= 40; week++) {
                try {
                    if (week <= 4) {
                        if (week == 1) {
                            // üëâ 1Ï£ºÏ∞®Îäî Ïã§Ï†ú ÌÅ¨Î°§ÎßÅ
                            driver.get("https://nutriciastore.co.kr/content/pregnancy_week.php?contentNo=2");
                            Thread.sleep(1500);
                            log.info("{}Ï£ºÏ∞®", week);

                            // === ÌÅ¨Î°§ÎßÅ Ï≤òÎ¶¨ ===
                            List<WebElement> sectionBlocks = driver.findElements(By.cssSelector("div.component_group"));
                            for (WebElement block : sectionBlocks) {
                                String titleText = "";
                                List<WebElement> titles = block.findElements(By.cssSelector("h3.title"));
                                for (WebElement title : titles) {
                                    titleText = cleanText(title.getText());
                                    String key = normalizeForDedup(titleText);
                                    if (!isExcluded(title, titleText) && !titleText.isEmpty() && seenNormalizedTexts.add(key)) {
                                        log.info("Ï†úÎ™©: {}", titleText);
                                    }
                                }

                                StringBuilder descriptionBuilder = new StringBuilder();

                                // Î≥∏Î¨∏
                                List<WebElement> contents = block.findElements(By.cssSelector("div.contents div.content p"));
                                for (WebElement p : contents) {
                                    String pText = cleanText(p.getText());
                                    if (!isExcluded(p, pText) && !pText.isEmpty()) {
                                        if (descriptionBuilder.length() > 0) descriptionBuilder.append("\n");
                                        descriptionBuilder.append(pText);
                                    }
                                }

                                // ÌÜ†Í∏Ä
                                List<WebElement> toggles = block.findElements(By.cssSelector("div.accordion div.item"));
                                for (WebElement toggle : toggles) {
                                    try {
                                        WebElement toggleTitle = toggle.findElement(By.cssSelector("h6.title"));
                                        String toggleTitleText = cleanText(toggleTitle.getText());

                                        if (toggleTitleText.contains("Ï∞∏Í≥†ÏûêÎ£å Î≥¥Í∏∞")) continue;

                                        ((JavascriptExecutor) driver).executeScript("arguments[0].click();", toggleTitle);
                                        Thread.sleep(500);

                                        if (descriptionBuilder.length() > 0) descriptionBuilder.append("\n\n");
                                        descriptionBuilder.append(toggleTitleText).append("\n");

                                        List<WebElement> toggleContents = toggle.findElements(By.cssSelector("div.content"));
                                        for (WebElement toggleContent : toggleContents) {
                                            String text = cleanText(toggleContent.getText());
                                            if (!isExcluded(toggleContent, text) && !text.isEmpty()) {
                                                descriptionBuilder.append(text).append("\n");
                                            }
                                        }
                                    } catch (Exception ignored) {}
                                }

                                if (!titleText.isEmpty() || descriptionBuilder.length() > 0) {
                                    log.info("Î≥∏Î¨∏+ÌÜ†Í∏Ä: {}", descriptionBuilder.toString()); // ‚úÖ Î°úÍ∑∏Î°ú ÌôïÏù∏
                                    String[] row = new String[]{
                                            String.valueOf(week),
                                            "", // category
                                            titleText,
                                            descriptionBuilder.toString().trim()
                                    };
                                    rows.add(row);
                                    firstWeekRows.add(row); // ‚úÖ 1Ï£ºÏ∞® Îç∞Ïù¥ÌÑ∞ Î∞±ÏóÖ
                                }
                            }
                        } else {
                            // üëâ 2~4Ï£ºÏ∞®Îäî 1Ï£ºÏ∞® Îç∞Ïù¥ÌÑ∞ Î≥µÏ†ú
                            for (String[] row : firstWeekRows) {
                                rows.add(new String[]{
                                        String.valueOf(week), // Ï£ºÏ∞®Îßå Î≥ÄÍ≤Ω
                                        row[1],
                                        row[2],
                                        row[3]
                                });
                            }
                            log.info("{}Ï£ºÏ∞® Îç∞Ïù¥ÌÑ∞Îäî 1Ï£ºÏ∞® Îç∞Ïù¥ÌÑ∞ Î≥µÏ†ú ÏôÑÎ£å", week);
                        }
                        continue;
                    }

                    // üëâ 5Ï£ºÏ∞® Ïù¥ÌõÑÎ∂ÄÌÑ∞Îäî Ï†ïÏÉÅ ÌÅ¨Î°§ÎßÅ
                    WebElement nextArrow = wait.until(ExpectedConditions.elementToBeClickable(
                            By.cssSelector("button.slick-next")));
                    nextArrow.click();
                    Thread.sleep(800);

                    WebElement activeWeek = wait.until(ExpectedConditions.elementToBeClickable(
                            By.cssSelector("a.item.slick-current.slick-active")));
                    ((JavascriptExecutor) driver).executeScript("arguments[0].click();", activeWeek);

                    Thread.sleep(1500);
                    log.info("{}Ï£ºÏ∞®", week);

                    // === 5Ï£ºÏ∞® Ïù¥ÌõÑÎèÑ ÎèôÏùº Ï≤òÎ¶¨ ===
                    List<WebElement> sectionBlocks = driver.findElements(By.cssSelector("div.component_group"));
                    for (WebElement block : sectionBlocks) {
                        String titleText = "";
                        List<WebElement> titles = block.findElements(By.cssSelector("h3.title"));
                        for (WebElement title : titles) {
                            titleText = cleanText(title.getText());
                            String key = normalizeForDedup(titleText);
                            if (!isExcluded(title, titleText) && !titleText.isEmpty() && seenNormalizedTexts.add(key)) {
                                log.info("Ï†úÎ™©: {}", titleText);
                            }
                        }

                        StringBuilder descriptionBuilder = new StringBuilder();

                        // Î≥∏Î¨∏
                        List<WebElement> contents = block.findElements(By.cssSelector("div.contents div.content p"));
                        for (WebElement p : contents) {
                            String pText = cleanText(p.getText());
                            if (!isExcluded(p, pText) && !pText.isEmpty()) {
                                if (descriptionBuilder.length() > 0) descriptionBuilder.append("\n");
                                descriptionBuilder.append(pText);
                            }
                        }

                        // ÌÜ†Í∏Ä
                        List<WebElement> toggles = block.findElements(By.cssSelector("div.accordion div.item"));
                        for (WebElement toggle : toggles) {
                            try {
                                WebElement toggleTitle = toggle.findElement(By.cssSelector("h6.title"));
                                String toggleTitleText = cleanText(toggleTitle.getText());

                                if (toggleTitleText.contains("Ï∞∏Í≥†ÏûêÎ£å Î≥¥Í∏∞")) continue;

                                ((JavascriptExecutor) driver).executeScript("arguments[0].click();", toggleTitle);
                                Thread.sleep(500);

                                if (descriptionBuilder.length() > 0) descriptionBuilder.append("\n\n");
                                descriptionBuilder.append(toggleTitleText).append("\n");

                                List<WebElement> toggleContents = toggle.findElements(By.cssSelector("div.content"));
                                for (WebElement toggleContent : toggleContents) {
                                    String text = cleanText(toggleContent.getText());
                                    if (!isExcluded(toggleContent, text) && !text.isEmpty()) {
                                        descriptionBuilder.append(text).append("\n");
                                    }
                                }
                            } catch (Exception ignored) {}
                        }

                        if (!titleText.isEmpty() || descriptionBuilder.length() > 0) {
                            log.info("Î≥∏Î¨∏+ÌÜ†Í∏Ä: {}", descriptionBuilder.toString()); // ‚úÖ Î°úÍ∑∏Î°ú ÌôïÏù∏
                            rows.add(new String[]{
                                    String.valueOf(week),
                                    "",
                                    titleText,
                                    descriptionBuilder.toString().trim()
                            });
                        }
                    }

                } catch (Exception e) {
                    log.error("{}Ï£ºÏ∞® ÌÅ¨Î°§ÎßÅ Ïã§Ìå®", week, e);
                }
            }

            // Excel ÌååÏùºÎ°ú Ï†ÄÏû•
            String filePath = "src/main/resources/export/tips.xlsx";
            ExcelWriter.writeTipsToExcel(filePath, rows);
            log.info("ÌÅ¨Î°§ÎßÅ Îç∞Ïù¥ÌÑ∞ Excel Ï†ÄÏû• ÏôÑÎ£å: {}", filePath);

        } catch (Exception e) {
            log.error("ÌÅ¨Î°§ÎßÅ Ï†ÑÏ≤¥ Ïã§Ìå®", e);
        } finally {
            driver.quit();
        }
    }

    /** ÌÖçÏä§Ìä∏ Ï†ïÎ¶¨ */
    private String cleanText(String text) {
        if (text == null) return "";
        return text
                .replaceAll("[\\u00B2\\u00B3\\u00B9\\u2070-\\u209F]", "")
                .replaceAll("\\d+(?=\\))", "")
                .replaceAll("(?<=\\D)\\d+(?=\\s*$)", "")
                .replaceAll("(?<=\\.)\\d+", "")
                .replace("ÏûêÏÑ∏Ìûà ÏïåÏïÑÎ≥¥Í∏∞", "")
                .replace("APTACLUB Í∞ÄÏûÖÌïòÍ∏∞", "")
                .replace("Aptaclub", "")
                .replaceAll("[\\t\\n\\r]+", " ")
                .replaceAll("\\s+", " ")
                .trim();
    }

    /** Ï§ëÎ≥µ Î∞©ÏßÄÏö© Ï†ïÍ∑úÌôî */
    private String normalizeForDedup(String text) {
        return text == null ? "" : text.toLowerCase().replaceAll("[^Í∞Ä-Ìû£a-z0-9]", "");
    }

    /** ÌäπÏ†ï Î¨∏Ïû• Ï∞®Îã® */
    private boolean isExcluded(WebElement element, String text) {
        if (text == null || text.isEmpty()) return true;

        String normalized = text.trim();
        if (normalized.contains("Ï∂úÏÇ∞ ÌõÑÏóê ÏÉàÎ°úÏö¥ Í≤ÉÏùÑ Ï†ëÌïòÎäî Í≤ΩÌóòÏù¥ ÏïÑÍ∏∞Ïùò ÏÑ±Ïû• Î∞úÎã¨Ïóê ÏûàÏñ¥ ÌöåÎ≥µÎ†•ÏùÑ Í∏∞Î•¥ÎäîÎç∞ ÎèÑÏõÄÏù¥ ÎêúÎã§Í≥† ÎØøÏäµÎãàÎã§")) {
            return true;
        }
        if (normalized.contains("Îâ¥Ìä∏Î¶¨ÏãúÏïÑ Ï†ÑÎ¨∏ÏòÅÏñëÏÇ¨ ÏºÄÏñ¥ÎùºÏù∏ÏùÄ ÏòÅÏú†ÏïÑ Î∞è ÏûÑÏÇ∞Î∂Ä, ÏàòÏú†Î∂ÄÏùò ÏòÅÏñëÏóê ÎåÄÌï¥ Ïó¨Îü¨Î∂ÑÏùò Í≥†ÎØºÏùÑ Ìï®ÍªòÌï®ÏúºÎ°úÏç® Î∂ÄÎ™®ÎãòÍ≥º ÏïÑÍ∏∞Í∞Ä ÎÇ¥ÏùºÏùÑ Ï§ÄÎπÑÌï† Ïàò ÏûàÎèÑÎ°ù ÎèÑÏôÄÎìúÎ¶¨Í≤†ÏäµÎãàÎã§")) {
            return true;
        }
        if (normalized.contains("ÏûÑÏã† Î∞è ÏòÅÏú†ÏïÑ ÏòÅÏñëÏóê ÎåÄÌï¥ Í∂ÅÍ∏àÌïú Ï†êÏù¥ ÏûàÏúºÏã†Í∞ÄÏöî?")) {
            return true;
        }
        return false;
    }
}